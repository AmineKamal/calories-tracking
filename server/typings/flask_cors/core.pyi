"""
This type stub file was generated by pyright.
"""

"""
    core
    ~~~~
    Core functionality shared between the extension and the decorator.

    :copyright: (c) 2016 by Cory Dolphin.
    :license: MIT, see LICENSE for more details.
"""
LOG = ...
ACL_ORIGIN = ...
ACL_METHODS = ...
ACL_ALLOW_HEADERS = ...
ACL_EXPOSE_HEADERS = ...
ACL_CREDENTIALS = ...
ACL_MAX_AGE = ...
ACL_REQUEST_METHOD = ...
ACL_REQUEST_HEADERS = ...
ALL_METHODS = ...
CONFIG_OPTIONS = ...
FLASK_CORS_EVALUATED = ...
RegexObject = ...
DEFAULT_OPTIONS = ...
def parse_resources(resources): # -> list[tuple[Unknown | Literal['.*'], Unknown]] | list[tuple[str, dict[Unknown, Unknown]]] | list[tuple[Unknown | Literal['.*'], dict[Unknown, Unknown]]] | list[tuple[Pattern[str] | Literal['.*'], dict[Unknown, Unknown]]]:
    ...

def get_regexp_pattern(regexp): # -> str:
    """
    Helper that returns regexp pattern from given value.

    :param regexp: regular expression to stringify
    :type regexp: _sre.SRE_Pattern or str
    :returns: string representation of given regexp pattern
    :rtype: str
    """
    ...

def get_cors_origins(options, request_origin): # -> list[str] | list[Unknown] | None:
    ...

def get_allow_headers(options, acl_request_headers): # -> str | None:
    ...

def get_cors_headers(options, request_headers, request_method):
    ...

def set_cors_headers(resp, options):
    """
    Performs the actual evaluation of Flas-CORS options and actually
    modifies the response object.

    This function is used both in the decorator and the after_request
    callback
    """
    ...

def probably_regex(maybe_regex): # -> bool:
    ...

def re_fix(reg): # -> Literal['.*']:
    """
        Replace the invalid regex r'*' with the valid, wildcard regex r'/.*' to
        enable the CORS app extension to have a more user friendly api.
    """
    ...

def try_match_any(inst, patterns): # -> bool:
    ...

def try_match(request_origin, maybe_regex): # -> Match[str] | Match[Unknown] | None:
    """Safely attempts to match a pattern or string to a request origin."""
    ...

def get_cors_options(appInstance, *dicts): # -> dict[str, str | list[str] | bool | None]:
    """
    Compute CORS options for an application by combining the DEFAULT_OPTIONS,
    the app's configuration-specified options and any dictionaries passed. The
    last specified option wins.
    """
    ...

def get_app_kwarg_dict(appInstance=...): # -> dict[str, Any | None]:
    """Returns the dictionary of CORS specific app configurations."""
    ...

def flexible_str(obj): # -> str | None:
    """
    A more flexible str function which intelligently handles stringifying
    strings, lists and other iterables. The results are lexographically sorted
    to ensure generated responses are consistent when iterables such as Set
    are used.
    """
    ...

def serialize_option(options_dict, key, upper=...): # -> None:
    ...

def ensure_iterable(inst): # -> list[str] | list[Unknown]:
    """
    Wraps scalars or string types as a list, or returns the iterable instance.
    """
    ...

def sanitize_regex_param(param): # -> list[str | Unknown]:
    ...

def serialize_options(opts): # -> dict[Any, Any]:
    """
    A helper method to serialize and processes the options dictionary.
    """
    ...

